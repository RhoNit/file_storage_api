basePath: /api
definitions:
  github_com_RhoNit_file_storage_api_internal_models.FileMetadata:
    properties:
      filename:
        type: string
      originalName:
        type: string
      size:
        type: integer
      uploadTime:
        type: string
      username:
        type: string
    type: object
  github_com_RhoNit_file_storage_api_internal_models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  github_com_RhoNit_file_storage_api_internal_models.PaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/github_com_RhoNit_file_storage_api_internal_models.FileMetadata'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  github_com_RhoNit_file_storage_api_internal_models.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  github_com_RhoNit_file_storage_api_internal_models.StorageInfo:
    properties:
      remainingStorage:
        type: integer
      totalStorage:
        type: integer
      usedStorage:
        type: integer
    type: object
host: localhost:8085
info:
  contact:
    email: ranitbiswas.cs@gmail.com
    name: Ranit Biswas
  description: APIs for file storage with jwt-authentication
  title: File Storage API
  version: "1.0"
paths:
  /files:
    get:
      description: Get list of files uploaded by authenticated user with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_RhoNit_file_storage_api_internal_models.PaginatedResponse'
      security:
      - BearerAuth: []
      summary: Get user files
      tags:
      - files
  /login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login credentials
        in: body
        name: login_request
        required: true
        schema:
          $ref: '#/definitions/github_com_RhoNit_file_storage_api_internal_models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - user_login
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User registration info
        in: body
        name: register_request
        required: true
        schema:
          $ref: '#/definitions/github_com_RhoNit_file_storage_api_internal_models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - user_registration
  /storage/remaining:
    get:
      description: Get remaining storage for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_RhoNit_file_storage_api_internal_models.StorageInfo'
      security:
      - BearerAuth: []
      summary: Get remaining storage
      tags:
      - user_storage_info
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file (requires authentication)
      parameters:
      - description: File to be uploaded
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload a file
      tags:
      - files
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
